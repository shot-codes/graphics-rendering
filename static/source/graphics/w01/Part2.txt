if (!navigator.gpu) {
	throw new Error('WebGPU not supported on this browser.');
}

const adapter = await navigator.gpu.requestAdapter();
if (!adapter) {
	throw new Error('No appropriate GPUAdapter found.');
}
const device = await adapter.requestDevice();

const context = canvas.getContext('webgpu');
const canvasFormat = navigator.gpu.getPreferredCanvasFormat();
context?.configure({
	device: device,
	format: canvasFormat,
});

const encoder = device.createCommandEncoder();

const createPoint = (center: [number, number], size: number) => {
	return [
		center[0] + -size / canvasWidth,
		center[1] + -size / canvasHeight,
		center[0] + size / canvasWidth,
		center[1] + -size / canvasHeight,
		center[0] + size / canvasWidth,
		center[1] + size / canvasHeight,

		center[0] + -size / canvasWidth,
		center[1] + -size / canvasHeight,
		center[0] + size / canvasWidth,
		center[1] + size / canvasHeight,
		center[0] + -size / canvasWidth,
		center[1] + size / canvasHeight,
	];
};

const vertices = new Float32Array([
	...createPoint([0, 0], 20),
	...createPoint([1, 1], 20),
	...createPoint([1, 0], 20),
]);

const vertexBuffer = device.createBuffer({
	label: 'Cell vertices',
	size: vertices.byteLength,
	usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
});

device.queue.writeBuffer(vertexBuffer, /*bufferOffset=*/ 0, vertices);

const vertexBufferLayout = {
	arrayStride: 8,
	attributes: [
		{
			format: 'float32x2',
			offset: 0,
			shaderLocation: 0, // Position, see vertex shader
		},
	],
};

const cellShaderModule = device.createShaderModule({
	label: 'Cell shader',
	code: shader,
});

const cellPipeline = device.createRenderPipeline({
	label: 'Cell pipeline',
	layout: 'auto',
	vertex: {
		module: cellShaderModule,
		entryPoint: 'vertexMain',
		buffers: [vertexBufferLayout],
	},
	fragment: {
		module: cellShaderModule,
		entryPoint: 'fragmentMain',
		targets: [
			{
				format: canvasFormat,
			},
		],
	},
});

const pass = encoder.beginRenderPass({
	colorAttachments: [
		{
			view: context.getCurrentTexture().createView(),
			loadOp: 'clear',
			clearValue: { r: 0.3921, g: 0.5843, b: 0.9294, a: 1.0 },
			storeOp: 'store',
		},
	],
});

pass.setPipeline(cellPipeline);
pass.setVertexBuffer(0, vertexBuffer);
pass.draw(vertices.length / 2); // 6 vertice
pass.end();
device.queue.submit([encoder.finish()]);
